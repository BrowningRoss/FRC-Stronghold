// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.USBCamera;
import edu.wpi.first.wpilibj.CameraServer;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveLeft;
    public static SpeedController driveRight;
    public static RobotDrive driverobotDrive;
    public static CANTalon pitchTalonL;
    public static CANTalon pitchTalonR;
    public static RobotDrive pitchPitchControl;
    public static CANTalon launcherTalonLauncherL;
    public static CANTalon launcherTalonLauncherR;
    public static DoubleSolenoid launcherPush;
    public static Compressor launcherCompressor;
    public static CANTalon armTalonL;
    public static CANTalon armTalonR;
    public static CANTalon elevatorTalonL;
    public static CANTalon elevatorTalonR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    
    
    
    
    public static double ANGLE = 1350;
    public static double SPEED = 4980;

    
    
    
    
    
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveLeft = new VictorSP(0);
        LiveWindow.addActuator("Drive", "Left", (VictorSP) driveLeft);
        
        driveRight = new VictorSP(1);
        LiveWindow.addActuator("Drive", "Right", (VictorSP) driveRight);
        
        driverobotDrive = new RobotDrive(driveLeft, driveRight);
        
        driverobotDrive.setSafetyEnabled(true);
        driverobotDrive.setExpiration(0.1);
        driverobotDrive.setSensitivity(0.5);
        driverobotDrive.setMaxOutput(1.0);

        driverobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        pitchTalonL = new CANTalon(3);
        LiveWindow.addActuator("Pitch", "TalonL", pitchTalonL);
        
        pitchTalonR = new CANTalon(4);
        LiveWindow.addActuator("Pitch", "TalonR", pitchTalonR);
        
        pitchPitchControl = new RobotDrive(pitchTalonL, pitchTalonR);
        
        pitchPitchControl.setSafetyEnabled(true);
        pitchPitchControl.setExpiration(0.1);
        pitchPitchControl.setSensitivity(0.5);
        pitchPitchControl.setMaxOutput(1.0);

        launcherTalonLauncherL = new CANTalon(1);
        LiveWindow.addActuator("Launcher", "TalonLauncherL", launcherTalonLauncherL);
        
        launcherTalonLauncherR = new CANTalon(2);
        LiveWindow.addActuator("Launcher", "TalonLauncherR", launcherTalonLauncherR);
        
        launcherPush = new DoubleSolenoid(0, 0, 7);
        LiveWindow.addActuator("Launcher", "Push", launcherPush);
        
        launcherCompressor = new Compressor(0);
        
        
        armTalonL = new CANTalon(5);
        LiveWindow.addActuator("Arm", "TalonL", armTalonL);
        
        armTalonR = new CANTalon(6);
        LiveWindow.addActuator("Arm", "TalonR", armTalonR);
        
        elevatorTalonL = new CANTalon(7);
        LiveWindow.addActuator("Elevator", "TalonL", elevatorTalonL);
        
        elevatorTalonR = new CANTalon(8);
        LiveWindow.addActuator("Elevator", "TalonR", elevatorTalonR);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        launcherCompressor.setClosedLoopControl(true);
        //USBcam = new USBCamera("cam0");
        //cam = CameraServer.getInstance();
        //cam.startAutomaticCapture(USBcam);
        
        
        
    /*    launcherTalonLauncherL.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        launcherTalonLauncherL.reverseSensor(false);
        launcherTalonLauncherL.configEncoderCodesPerRev(20);
        launcherTalonLauncherL.configNominalOutputVoltage(+0.0f, -0.0f);
        launcherTalonLauncherL.configPeakOutputVoltage(+12.0f, 0.0f);
        launcherTalonLauncherL.setProfile(0);
        launcherTalonLauncherL.setF(10);
        launcherTalonLauncherL.setP(2);
        launcherTalonLauncherL.setI(0);
        launcherTalonLauncherL.setD(0);
        
        launcherTalonLauncherR.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        launcherTalonLauncherR.reverseSensor(false);
        launcherTalonLauncherR.configEncoderCodesPerRev(20);
        launcherTalonLauncherR.configNominalOutputVoltage(+0.0f, -0.0f);
        launcherTalonLauncherR.configPeakOutputVoltage(+12.0f, 0.0f);
        launcherTalonLauncherR.setProfile(0);
        launcherTalonLauncherR.setF(10);
        launcherTalonLauncherR.setP(2);
        launcherTalonLauncherR.setI(0);
        launcherTalonLauncherR.setD(0);
        */
    }
}
