// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.subsystems;

import org.usfirst.frc6133.HaltomRobotics.RobotMap;
import org.usfirst.frc6133.HaltomRobotics.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Pitch extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonL = RobotMap.pitchTalonL;
    private final CANTalon talonR = RobotMap.pitchTalonR;
    private final RobotDrive pitchControl = RobotMap.pitchPitchControl;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final double STEP = 0.103478;
    public static final double MIN_COUNT = -450;
    public static final double MAX_COUNT = 460;
    
    
    
    
	

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new AdjustPitch());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        /*talonL.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        talonL.reverseSensor(true);
    	talonL.configEncoderCodesPerRev(497);
    	talonL.configNominalOutputVoltage(+0.0f, -0.0f);
    	talonL.configPeakOutputVoltage(+12.0f, -12.0f);
    	talonL.setProfile(0);
    	talonL.setF(0);
    	talonL.setP(1.5);
    	talonL.setI(0.015);
    	talonL.setD(150);
    	//talonL.setEncPosition(0);
    	 */
    	
    	talonR.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	talonR.reverseSensor(true);
    	talonR.configEncoderCodesPerRev(497);
    	talonR.configNominalOutputVoltage(+0.0f, -0.0f);
    	talonR.configPeakOutputVoltage(+12.0f, -12.0f);
    	talonR.setProfile(0);
    	talonR.setF(0);
    	talonR.setP(1.5);
    	talonR.setI(0.015);
    	talonR.setD(150);
    	//talonR.setEncPosition(0);
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void adjustPitch(GenericHID joystick) {
    	double LT = joystick.getRawAxis(2);
    	double RT = joystick.getRawAxis(3);
    	talonL.changeControlMode(TalonControlMode.PercentVbus);
    	talonR.changeControlMode(TalonControlMode.PercentVbus);
    	if (LT != 0.0)
    		pitchControl.drive(LT, 0);
    	else if (RT != 0)
    		pitchControl.drive(-RT, 0);
    	else
    		pitchControl.drive(0, 0);
    }
    
    public void stop() {
    	talonL.changeControlMode(TalonControlMode.PercentVbus);
    	talonR.changeControlMode(TalonControlMode.PercentVbus);
    	pitchControl.drive(0, 0);
    }
    
    public void adjustPitchPID(double target)	{   	
    	talonL.changeControlMode(TalonControlMode.Follower);
        talonR.changeControlMode(TalonControlMode.Position);
        talonR.set(target/-1988.);
        talonL.set(-1 * talonR.getDeviceID());
        
        
        talonR.setAllowableClosedLoopErr(10);
        
    	
    	
    }
}

