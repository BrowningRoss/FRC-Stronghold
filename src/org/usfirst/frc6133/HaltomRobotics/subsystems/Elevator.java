
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.subsystems;

import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;
import org.usfirst.frc6133.HaltomRobotics.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;



public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonL = RobotMap.elevatorTalonL;
    private final CANTalon talonR = RobotMap.elevatorTalonR;
    
    public boolean retract = true;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new ControlElevator());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void stop() {
    	talonL.changeControlMode(TalonControlMode.PercentVbus);
    	talonL.set(0);
    	talonR.changeControlMode(TalonControlMode.PercentVbus);
    	talonR.set(0);
    }
    
    public void adjustElevator(GenericHID joystick) {
    	int pov = joystick.getPOV();
    	if (pov == -1)
    		//talonL.set(0);
    		//talonR.set(0);
    		elevatePID(retract);
    	if (pov == 90)
    	{
    		retract = false;
    		elevatePID(false);
    	}
    	if (pov == 270)
    	{
    		retract = true;
    		elevatePID(true);
    	}
    		
    }
    
    public void elevatePID(boolean retract) {
    	if (retract)
    	{
    		talonL.set(-.5);
    		talonR.set(-.5);
    		//talonL.changeControlMode(TalonControlMode.Follower);
    		//talonR.changeControlMode(TalonControlMode.Position);
        	//talonR.set(1000);
        	//talonL.set(talonR.getDeviceID());
        	
        	//talonR.setAllowableClosedLoopErr(3);
    	} else {
    		talonL.set(.5);
    		talonR.set(.5);
    		//talonL.changeControlMode(TalonControlMode.Follower);
        	//talonR.changeControlMode(TalonControlMode.Position);
        	//talonR.set(3380);
        	//talonL.set(talonR.getDeviceID());
        	
        	//talonR.setAllowableClosedLoopErr(20);
    	}
    }
    
}

