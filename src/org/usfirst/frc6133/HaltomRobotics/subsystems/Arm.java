
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.subsystems;

import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;
import org.usfirst.frc6133.HaltomRobotics.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.GenericHID;
//import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;



 
 
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonL = RobotMap.armTalonL;
    private final CANTalon talonR = RobotMap.armTalonR;
    //private final CANTalon talonL2 = RobotMap.armTalonL2;
    //private final CANTalon talonR2 = RobotMap.armTalonR2;
    //private final RobotDrive armControl = RobotMap.armArmControl;
    
    private final double phase0 = 0;
    private final double phase1 = 7.5 / 360. * 2840;
    private final double phase2 = 45. / 360. * 2840;
    private final double phase3 = 60. / 360. * 2840;
    private final double phase4 = 95. / 360. * 2840;
    
    public int phase = 0;
    public double[] phases = { phase0, phase1, phase2, phase3, phase4 };
    public Timer timer;
    public double timeSinceLast = 0;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new ControlArm());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	talonR.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	talonR.reverseSensor(true);
    	talonR.configEncoderCodesPerRev(710);
    	talonR.configNominalOutputVoltage(+0.0f, -0.0f);
    	talonR.configPeakOutputVoltage(+12.0f, -12.0f);
    	talonR.setProfile(0);
    	talonR.setF(0);
    	talonR.setP(1.5);
    	talonR.setI(0.015);
    	talonR.setD(150);
    	
    	//timer.start();
    }
    
    public void initTalons()
    {
    	if (Robot.initArms) {
    		talonR.setEncPosition(0);
    		Robot.initArms = false;
    	}
    }
    
    public void stop() {
    	talonL.changeControlMode(TalonControlMode.PercentVbus);
    	talonR.changeControlMode(TalonControlMode.PercentVbus);
    	//armControl.drive(0, 0);
    	//talonL2.changeControlMode(TalonControlMode.PercentVbus);
    	//talonR2.changeControlMode(TalonControlMode.PercentVbus);
    	talonL.set(0);
    	//talonL2.set(0);
    	talonR.set(0);
    	//talonR2.set(0);
    }
    
    public void adjustArmPID(double target)	{   	
    	talonL.changeControlMode(TalonControlMode.Follower);
    	//talonL2.changeControlMode(TalonControlMode.Follower);
    	//talonR2.changeControlMode(TalonControlMode.Follower);
        talonR.changeControlMode(TalonControlMode.Position);
        //talonR.setInverted(true);
        //talonL.setInverted(true);
        
        talonR.set(target/-2840.);
        talonL.set(talonR.getDeviceID());
        //talonL2.set(talonR.getDeviceID());
        //talonR2.set(talonR.getDeviceID());
        
        
        talonR.setAllowableClosedLoopErr(25);
        
    	
    	
    }
    
    public void adjustArm(GenericHID joystick) {
    	talonL.changeControlMode(TalonControlMode.PercentVbus);
    	//talonR.changeControlMode(TalonControlMode.PercentVbus);
    	
    	int pov = joystick.getPOV();
    	
    	if (pov == 0 || pov == 180 )			// || means or,  && means and
    	{
    		if (timeSinceLast == 0)
    		{
    			timeSinceLast = timer.get();
    		} else if (timer.get() - timeSinceLast < 1)
    		{
    			pov = -1;
    		} else {
    			timeSinceLast = 0;
    		}
    	}
    	////////////
    	if (pov == -1)
    	{
    		
    		adjustArmPID(phases[phase]);
    		//talonL.set(0);
    		//talonR.set(0);
    		return;
    	}
    	
    	if (pov == 0)
    	{
    		if (phase + 1 >= 5)
    			phase = 4;
    		else
    			phase++;		//phase = phase + 1;
    		adjustArmPID(phases[phase]);
    		//talonL.set(-1);
    		//talonR.set(1);
    	}
    	if (pov == 180)
    	{
    		if (phase - 1 < 0)
    			phase = 0;
    		else
    			phase--;
    		adjustArmPID(phases[phase]);
    		//talonL.set(1);
    		//talonR.set(-1);
    	}
    	
    	
    }
    
   
    
    
}

