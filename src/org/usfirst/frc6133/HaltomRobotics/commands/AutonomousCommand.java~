// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;

/**
 *
 */
public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	public Timer timer;
	
	public static final int LOW_BAR = 1;
	public static final int PORTCULLIS = 2;
	public static final int CHEVAL_DE_FRISE = 3;
	public static final int MOAT = 4,
			RAMPARTS = 5,
			DRAWBRIDGE = 6,
			SALLY_PORT = 7,
			ROCK_WALL = 8,
			ROUGH_TERRAIN = 9;
	
	public static int DEF_1 = LOW_BAR;
	public static int DEF_2 = 0, DEF_3 = 0, DEF_4 = 0, DEF_5 = 0;
	public static boolean done_Phase_1 = false;
	public static boolean done_Phase_2 = false;
	public static boolean done_Phase_3 = false;
	public static boolean done_Defense = false;
	public static boolean done_Shot = false;
	
	public static int startSlot;
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pitch);
        requires(Robot.launcher);
        timer = new Timer();
        
        //For now we will assume that the defenses are set up as follows:
        if (DEF_2 == 0)
        	DEF_2 = PORTCULLIS;
        if (DEF_3 == 0)
        	DEF_3 = RAMPARTS;
        if (DEF_4 == 0)
        	DEF_4 = DRAWBRIDGE;
        if (DEF_5 == 0)
        	DEF_5 = ROCK_WALL;
        
        startSlot = 3;		//We will pretend that we are starting in front of defense #3 and that it is the Ramparts
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	timer.start();
    	RobotMap.driverobotDrive.drive(.4, 0);
    	Robot.pitch.adjustPitchPID(1300.);
    }
    
    public void Ramparts()
    {
    	//TODO: Set timePhase1 to be the amount of time it takes to reach the Ramparts
    	//		and set timePhase2 to be the amount of time it takes to cross the Ramparts.
    	double timePhase1 = 1.5;
    	double timePhase2 = 6.5;
    	
    	if (timer.get() < timePhase1)
			Robot.pitch.adjustPitchPID(1300);			//TODO: Set the PID amount based on the needed angle for climbing the ramparts
    	
		if (timer.get() >= timePhase1 && !done_Phase_1)	{
    		Robot.pitch.adjustPitchPID(0);				//TODO: Set the PID amount based on the needed angle for continuing to pass the ramprts.
    		done_Phase_1 = true;
    	}
		if (timer.get() >= timePhase2 && done_Phase_1 && !done_Phase_2) {
			Robot.pitch.adjustPitchPID(1700);			//TODO:	Set the PID amount based on where we believe we need it to make the shot.
			RobotMap.driverobotDrive.drive(0, 0);
			done_Phase_2 = true;
			done_Phase_3 = true;
			done_Defense = true;
		}

    }
    
    public void LowBar()
    {
    	double timePhase1 = 2;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void Portcullis()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void ChevalDeFrise()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void Moat()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void Drawbridge()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void SallyPort()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void RockWall()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1  && !done_Phase_1)	{
    		
    	}

    }
    
    public void RoughTerrain()
    {
    	double timePhase1 = 1.5;
		if (timer.get() >= timePhase1 && !done_Phase_1)	{
    		
    	}

    }
    
    public int GetStartingDefense(int startLoc) {
    	if (startLoc == 1)
    		return DEF_1;
    	else if (startLoc == 2)
    		return DEF_2;
    	else if (startLoc == 3)
    		return DEF_3;
    	else if (startLoc == 4)
    		return DEF_4;
    	else
    		return DEF_5;
    }
    
    public void ExecuteDefenseStrategy(int def)
    {
    	if (def == LOW_BAR)
    		LowBar();
    	else if (def == PORTCULLIS)
    		Portcullis();
    	else if (def == CHEVAL_DE_FRISE)
    		ChevalDeFrise();
    	else if (def == MOAT)
    		Moat();
    	else if (def == RAMPARTS)
    		Ramparts();
    	else if (def == DRAWBRIDGE)
    		Drawbridge();
    	else if (def == SALLY_PORT)
    		SallyPort();
    	else if (def == ROCK_WALL)
    		RockWall();
    	else
    		RoughTerrain();
    }
    
    public void ExecuteShot() {
    	done_Shot = true;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (!done_Defense)
    		ExecuteDefenseStrategy(GetStartingDefense(startSlot));
    	else if (!done_Shot){
    		ExecuteShot();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
