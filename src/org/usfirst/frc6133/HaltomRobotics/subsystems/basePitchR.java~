// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.subsystems;

import org.usfirst.frc6133.HaltomRobotics.RobotMap;
import org.usfirst.frc6133.HaltomRobotics.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class basePitchR extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonPitchR = RobotMap.basePitchRTalonPitchR;
    private final Encoder encoderPitchR = RobotMap.basePitchREncoderPitchR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final int PITCH_0_DEG = 0,
			PITCH_5_DEG = 1,
			PITCH_10_DEG = 2,
			PITCH_15_DEG = 3,
			PITCH_21_DEG = 4,
			PITCH_26_DEG = 5,
			PITCH_31_DEG = 6,
			PITCH_36_DEG = 7,
			PITCH_41_DEG = 8,
			PITCH_46_DEG = 9,
			PITCH_N5_DEG = -1,
			PITCH_N10_DEG = -2,
			PITCH_N15_DEG = -3,
			PITCH_N21_DEG = -4,
			PITCH_N26_DEG = -5,
			PITCH_N31_DEG = -6,
			PITCH_N36_DEG = -7;
    // Initialize your subsystem here
    public basePitchR() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("basePitchR", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.0);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("basePitchR", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        
        // Use these to get going:
        setSetpoint(PITCH_0_DEG);
        enable();
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	encoderPitchR.reset();
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return encoderPitchR.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        talonPitchR.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}
