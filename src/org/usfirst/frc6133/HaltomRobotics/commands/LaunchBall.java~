// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.commands;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;

/**
 *
 */
public class LaunchBall extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_percent_power;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_rpm = 1776.169;
    public double m_targetSpeed;
    
    int loops = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LaunchBall(double percent_power) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_percent_power = percent_power;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.launcher);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	m_targetSpeed = m_rpm;
    	/*double kF = SmartDashboard.getNumber("kF");
    	double kP = SmartDashboard.getNumber("kP");
    	double kI = SmartDashboard.getNumber("kI");
    	double kD = SmartDashboard.getNumber("kD");
    	RobotMap.launcherTalonLauncherL.setF(kF);
    	RobotMap.launcherTalonLauncherL.setP(kP);
    	RobotMap.launcherTalonLauncherL.setI(kI);
    	RobotMap.launcherTalonLauncherL.setD(kD);
    	RobotMap.launcherTalonLauncherL.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	RobotMap.launcherTalonLauncherL.reverseSensor(true);
    	RobotMap.launcherTalonLauncherL.configEncoderCodesPerRev(20);
    	RobotMap.launcherTalonLauncherL.configNominalOutputVoltage(+0.0f, -0.0f);
    	RobotMap.launcherTalonLauncherL.configPeakOutputVoltage(+12.0f, -12.0f);
    	RobotMap.launcherTalonLauncherL.setProfile(0);
    	RobotMap.launcherTalonLauncherL.setF(1.4476);
    	RobotMap.launcherTalonLauncherL.setP(0);
    	RobotMap.launcherTalonLauncherL.setI(0);
    	RobotMap.launcherTalonLauncherL.setD(0);
    	RobotMap.launcherTalonLauncherL.setEncPosition(0);
    	*/
    	
    	RobotMap.launcherTalonLauncherR.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	RobotMap.launcherTalonLauncherR.reverseSensor(true);
    	RobotMap.launcherTalonLauncherR.configEncoderCodesPerRev(20);
    	RobotMap.launcherTalonLauncherR.configNominalOutputVoltage(+0.0f, -0.0f);
    	RobotMap.launcherTalonLauncherR.configPeakOutputVoltage(+12.0f, -12.0f);
    	RobotMap.launcherTalonLauncherR.setProfile(0);
    	RobotMap.launcherTalonLauncherR.setF(1.4476);
    	RobotMap.launcherTalonLauncherR.setP(2.5575);
    	RobotMap.launcherTalonLauncherR.setI(0);
    	RobotMap.launcherTalonLauncherR.setD(0);
    	RobotMap.launcherTalonLauncherR.setEncPosition(0);
    	//Robot.launcher.setPIDLauncher(m_targetSpeed);
    	
        
        
    	
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//RobotMap.launcherTalonLauncherL.set(m_percent_power);
    	//RobotMap.launcherTalonLauncherR.set(m_percent_power);
    	double motorOutput = RobotMap.launcherTalonLauncherR.getOutputVoltage() / RobotMap.launcherTalonLauncherR.getBusVoltage();
    	//Robot.launcher.setPIDLauncher(m_targetSpeed);
    	
    	Robot.launcher.setPIDLauncher(RobotMap.SPEED);
    	//Robot.launcher.setLauncher(1);
    	//System.out.println("Enc: " + RobotMap.launcherTalonLauncherR.getSpeed());
    	if (++loops >= 100) {
    		loops = 0;
    		//System.out.println("\terr: " + RobotMap.launcherTalonLauncherL.getClosedLoopError() + "\tspd: " + RobotMap.launcherTalonLauncherL.getSpeed());
    		System.out.println("\tspd: " + RobotMap.launcherTalonLauncherR.getSpeed() + "\terr: " + RobotMap.launcherTalonLauncherR.getClosedLoopError());
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
