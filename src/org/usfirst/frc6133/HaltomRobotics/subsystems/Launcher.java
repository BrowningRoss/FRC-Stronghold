// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6133.HaltomRobotics.subsystems;

import org.usfirst.frc6133.HaltomRobotics.Robot;
import org.usfirst.frc6133.HaltomRobotics.RobotMap;
import org.usfirst.frc6133.HaltomRobotics.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Launcher extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonLauncherL = RobotMap.launcherTalonLauncherL;
    private final CANTalon talonLauncherR = RobotMap.launcherTalonLauncherR;
    private final DoubleSolenoid push = RobotMap.launcherPush;
    //private final Solenoid push = RobotMap.launcherPush;
    private final Compressor compressor = RobotMap.launcherCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new StopLauncher());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setLauncher(double power) {
    	//talonLauncherL.changeControlMode(TalonControlMode.PercentVbus);
    	talonLauncherR.changeControlMode(TalonControlMode.PercentVbus);
    	talonLauncherL.changeControlMode(TalonControlMode.Follower);
    	
    	
    	talonLauncherR.set(power);
    	talonLauncherL.set(talonLauncherR.getDeviceID());
    	push.set(DoubleSolenoid.Value.kReverse);
    	//push.set(false);
    }
    
    public void setPIDLauncher(double rpm) {
    	
    	//talonLauncherR.changeControlMode(TalonControlMode.Speed);
    	//talonLauncherR.set(rpm);
    	talonLauncherR.changeControlMode(TalonControlMode.PercentVbus);
    	talonLauncherR.set(.925);
    	talonLauncherL.changeControlMode(TalonControlMode.Follower);
    	talonLauncherL.set(talonLauncherR.getDeviceID());
    	
    	if (Robot.vision.goalsFound == 0)
    	{
    		
    		push.set(DoubleSolenoid.Value.kForward);
    	}
  
    	else if (Robot.drive.rotateToAim() && Robot.pitch.isPitchReady() && isLauncherReady()) {
    		
    		push.set(DoubleSolenoid.Value.kForward);
    	}
    }
    
    public boolean isLauncherReady()
    {
    	//if (Math.abs(talonLauncherR.getSetpoint() - talonLauncherR.getSpeed()) <= 3)
    	//	return true;
    	//System.out.println("Launcher not ready:" + talonLauncherR.getSetpoint() + " " + talonLauncherR.getSpeed());
    	double percentVbus = talonLauncherR.getBusVoltage() / 12. ;
    	if (percentVbus > .9)
    		return true;
    	return false;
    }
    
}

